// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Posig.Blog.Data;

#nullable disable

namespace Posig.Blog.Data.Migrations
{
    [DbContext(typeof(PosigBlogContext))]
    [Migration("20240723185348_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("Posig.Blog.Shared.Entities.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("BlogPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3d1d95b-3c1b-4794-b672-6902383c42de"),
                            Author = "Author 1",
                            Content = "Content for blog post 1",
                            CreatedAt = new DateTime(2024, 7, 23, 15, 53, 48, 500, DateTimeKind.Local).AddTicks(7565),
                            Title = "Blog Post 1",
                            UpdatedAt = new DateTime(2024, 7, 23, 15, 53, 48, 500, DateTimeKind.Local).AddTicks(7584)
                        },
                        new
                        {
                            Id = new Guid("65de260f-fad3-4983-adbd-af4b69f16b14"),
                            Author = "Author 2",
                            Content = "Content for blog post 2",
                            CreatedAt = new DateTime(2024, 7, 23, 15, 53, 48, 500, DateTimeKind.Local).AddTicks(7588),
                            Title = "Blog Post 2",
                            UpdatedAt = new DateTime(2024, 7, 23, 15, 53, 48, 500, DateTimeKind.Local).AddTicks(7589)
                        });
                });

            modelBuilder.Entity("Posig.Blog.Shared.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BlogPostId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21617f22-c34e-4ed4-a46d-723e441317a9"),
                            Author = "Commenter 1",
                            BlogPostId = new Guid("e3d1d95b-3c1b-4794-b672-6902383c42de"),
                            CommentText = "This is a comment",
                            CreatedAt = new DateTime(2024, 7, 23, 15, 53, 48, 500, DateTimeKind.Local).AddTicks(7595),
                            UpdatedAt = new DateTime(2024, 7, 23, 15, 53, 48, 500, DateTimeKind.Local).AddTicks(7596)
                        },
                        new
                        {
                            Id = new Guid("ee8f5c03-91ff-4636-821c-fb03f352377d"),
                            Author = "Commenter 2",
                            BlogPostId = new Guid("e3d1d95b-3c1b-4794-b672-6902383c42de"),
                            CommentText = "This is another comment",
                            CreatedAt = new DateTime(2024, 7, 23, 15, 53, 48, 500, DateTimeKind.Local).AddTicks(7600),
                            UpdatedAt = new DateTime(2024, 7, 23, 15, 53, 48, 500, DateTimeKind.Local).AddTicks(7601)
                        },
                        new
                        {
                            Id = new Guid("9219b544-e4df-402d-8d75-a844ee0907f4"),
                            Author = "Commenter 3",
                            BlogPostId = new Guid("65de260f-fad3-4983-adbd-af4b69f16b14"),
                            CommentText = "This is a comment on post 2",
                            CreatedAt = new DateTime(2024, 7, 23, 15, 53, 48, 500, DateTimeKind.Local).AddTicks(7604),
                            UpdatedAt = new DateTime(2024, 7, 23, 15, 53, 48, 500, DateTimeKind.Local).AddTicks(7605)
                        });
                });

            modelBuilder.Entity("Posig.Blog.Shared.Entities.Comment", b =>
                {
                    b.HasOne("Posig.Blog.Shared.Entities.BlogPost", null)
                        .WithMany("Comments")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Posig.Blog.Shared.Entities.BlogPost", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
